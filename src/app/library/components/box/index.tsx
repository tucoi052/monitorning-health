import React, { forwardRef, useMemo } from 'react';
import { StyleProp, StyleSheet, ViewStyle } from 'react-native';

import { propsToStyle, scaleH, scaleW } from '@common';
import { View } from '@components/core';
import { useThemeStyles } from '@theme';

import { BoxProps } from './type';

const styles = StyleSheet.create({
  block: {
    flex: 1,
  },
});

export const Box = forwardRef(
  (
    {
      left,
      flex,
      top,
      block,
      right,
      w,
      h,
      border,
      middle,
      bottom,
      zIndex,
      m,
      shadow,
      opacity,
      p,
      children,
      maxWidth,
      overflow,
      position,
      flexWrap,
      minWidth,
      alignSelf,
      maxHeight,
      minHeight,
      mt,
      ml,
      alignItems,
      colorTheme,
      pt,
      mr,
      borderStyle,
      pl,
      borderColor,
      borderWidth,
      borderRadius,
      pr,
      mb,
      pb,
      mh,
      mv,
      borderTopColor,
      justifyContent,
      borderTopWidth,
      pv,
      borderLeftWidth,
      borderLeftColor,
      borderRightColor,
      borderRightWidth,
      borderColorTheme,
      ph,
      borderBottomColor,
      borderBottomWidth,
      borderTopLeftRadius,
      borderTopRightRadius,
      color: backgroundColor,
      borderBottomLeftRadius,
      borderBottomRightRadius,
      direction: flexDirection,
      shadowConfig = {},
      style = {},
      ...rest
    }: BoxProps,
    ref: React.ForwardedRef<View>,
  ) => {
    // state
    const { theme } = useThemeStyles();

    const styleComponent = useMemo<StyleProp<ViewStyle>>(
      () => [
        block === true && styles.block,
        border === true && {
          borderWidth: 1,
          borderColor: '#bbb',
        },
        colorTheme && { backgroundColor: (theme.color[colorTheme] as string) },
        borderColorTheme && { borderColor: (theme.color[borderColorTheme] as string) },
        middle && { alignItems: 'center' },
        shadow && {
          shadowColor: '#000',
          shadowOffset: {
            width: 0,
            height: 2,
          },
          shadowOpacity: 0.25,
          shadowRadius: 3.84,

          elevation: 5,
          ...shadowConfig,
        },
        propsToStyle([
          { margin: scaleH(m!) },
          { marginLeft: scaleW(ml!) },
          { marginRight: scaleW(mr!) },
          { marginTop: scaleH(mt!) },
          { marginBottom: scaleH(mb!) },
          { marginVertical: scaleH(mv!) },
          { marginHorizontal: scaleW(mh!) },
          { flexDirection },
          { padding: scaleH(p!) },
          { paddingRight: scaleW(pr!) },
          { paddingBottom: scaleH(pb!) },
          { paddingLeft: scaleW(pl!) },
          { paddingTop: scaleH(pt!) },
          { paddingHorizontal: scaleW(ph!) },
          { paddingVertical: pv },
          { width: typeof w === 'number' ? scaleW(w!) : w },
          { height: typeof h === 'number' ? scaleH(h!) : h },
          {
            maxHeight:
              typeof maxHeight === 'number' ? scaleH(maxHeight!) : maxHeight,
          },
          {
            maxWidth:
              typeof maxWidth === 'number' ? scaleW(maxWidth!) : maxWidth,
          },
          {
            minHeight:
              typeof minHeight === 'number' ? scaleH(minHeight!) : minHeight,
          },
          {
            minWidth:
              typeof minWidth === 'number' ? scaleW(minWidth!) : minWidth,
          },
          { borderWidth },
          { borderColor },
          { backgroundColor },
          { justifyContent },
          { alignItems },
          { alignSelf },
          { borderRadius },
          { flex },
          { position },
          { flexWrap },
          { left },
          { right },
          { bottom },
          { top },
          { zIndex },
          { overflow },
          { borderBottomColor },
          { borderBottomLeftRadius },
          { borderBottomRightRadius },
          { borderLeftColor },
          { borderRightColor },
          { borderStyle },
          { borderTopColor },
          { borderTopLeftRadius },
          { borderTopRightRadius },
          { opacity },
          { borderBottomWidth },
          { borderLeftWidth },
          { borderRightWidth },
          { borderTopWidth },
        ]),
        style,
      ],
      [
        block,
        border,
        colorTheme,
        theme.color,
        borderColorTheme,
        middle,
        shadow,
        shadowConfig,
        m,
        ml,
        mr,
        mt,
        mb,
        flexDirection,
        p,
        pr,
        pb,
        pl,
        pt,
        ph,
        pv,
        w,
        h,
        maxHeight,
        maxWidth,
        minHeight,
        minWidth,
        borderWidth,
        borderColor,
        backgroundColor,
        justifyContent,
        alignItems,
        alignSelf,
        borderRadius,
        flex,
        position,
        flexWrap,
        left,
        right,
        bottom,
        top,
        zIndex,
        overflow,
        borderBottomColor,
        borderBottomLeftRadius,
        borderBottomRightRadius,
        borderLeftColor,
        borderRightColor,
        borderStyle,
        borderTopColor,
        borderTopLeftRadius,
        borderTopRightRadius,
        opacity,
        borderBottomWidth,
        borderLeftWidth,
        borderRightWidth,
        borderTopWidth,
        style,
      ],
    );

    // render
    return (
      <View style={styleComponent} {...rest} ref={ref} children={children} />
    );
  },
);
